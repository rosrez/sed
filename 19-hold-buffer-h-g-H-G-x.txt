@@
1. THE 'h' (HOLD) COMMAND -- COPY THE PATTERN SPACE INTO THE HOLD BUFFER

This command just copies the contents of the pattern space into the buffer, but leaves the pattern space intact; i.e. we can print the pattern space, substitute characters in it just as if there was no h command.

@@
2. THE 'g' (GET) COMMAND - COPY THE HOLD BUFFER INTO THE PATTERN SPACE

EXAMPLE

$ cat hold-buffer.sed 
# On line 2, copy the pattern space (i.e. line 2) to the hold buffer
# Note that this doesn't interfere with printing the line
# (sed's default behavior).
2 {
    h
}
# On the last line, print the pattern space (i.e. the last line)
# and get the hold buffer. On the final closing brace, 
# This will print the contents of the pattern space (sed's default behaviour).
$ {
    p
    g
}

# Essentially, we just repeat line 2 after printing the whole text.

$ sed -f hold-buffer.sed dukeofyork.txt 
The grand old Duke of York
He had ten thousand men                     <--- LINE 2, WHERE IT ORIGINALLY OCCURS
He marched them up to the top of the hill
And he marched them down again
And when they were up they were up
And when they were down they were down
And when they were only half-way up
They were neither up nor down
He had ten thousand men                     <--- LINE 2 REPEATED AFTER THE END OF THE ORIGINAL TEXT

@@
3. THE 'H' (HOLD) COMMAND -- APPEND A NEWLINE CHARACTER TO THE HOLD BUFFER, FOLLOWED BY A COPY OF THE PATTERN SPACE

@@
4. THE 'G' (GET) COMMAND -- APPEND A NEWLINE CHARACTER TO THE PATTERN SPACE, FOLLOWED BY A COPY OF THE HOLD BUFFER

EXAMPLE

$ cat hold-buffer-multiline.sed 
# On line 2, copy the pattern space (i.e. line 2) to the hold buffer
# Note that this doesn't interfere with printing the line
# (sed's default behavior).
2 {
    h
    # append another copy of line 2 to the hold buffer, now it will store 2 copies of the line
    H
}
# On the last line, append the hold buffer (i.e. 2 copies of line 2) to the pattern space
# (i.e. the last line). So the net effect will be to print (on the final closing brace)
# the last line followed by two copies of line 2.
$ {
    G
}

The script produces the following output:

$ sed -f hold-buffer-multiline.sed dukeofyork.txt 
The grand old Duke of York
He had ten thousand men
He marched them up to the top of the hill
And he marched them down again
And when they were up they were up
And when they were down they were down
And when they were only half-way up
They were neither up nor down
He had ten thousand men                         <--- COPY OF LINE 2 (ORIGINALLY STORED WITH h): RESTORED BY G
He had ten thousand men                         <--- COPY OF LINE 2 (ORIGINALLY STORED WITH H): RESTORED BY G

@@
5. THE 'x' (EXCHANGE) COMMAND -- EXCHANGE CONTENTS OF THE CURRENT PATTERN SPACE AND THE HOLD BUFFER

EXAMPLE

$ cat hold-buffer-exchange.sed 
# The script replaces pairs of underscores with HTML tags for italics (<i> ... </i>)
# Note that because we use the hold buffer to store a flag, 
# our logic spans an arbitrary number of lines.
: top
/_/ {
    # Flip the current pattern space into the hold buffer temporarily
    x
    # The contents of the hold buffer are treated as a variable here,
    # since we just track the appearance of an underscores by setting
    # the hold buffer to 'ON' or 'OFF'.
    
    # If the hold buffer contents don't include ON
    /ON/ !{
        # replace the entire hold buffer contents with 'ON':
        # sets the 'ON' flag
        s/.*/ON/
        # flip the hold buffer contents back to the hold buffer
        x
        # replace _ with the opening <i> tag
        s;_;<i>;
    }
    # If the hold buffer contents don't include 'ON'
    # (i.e. we have remembered an 'opening' underscore/<i>)
    /ON/ {
        # replace the entire hold buffer to 'OFF':
        # resets the 'ON' flag
        s/.*/OFF/
        # flip the hold buffer contents back to the hold buffer
        x
        # replace _ with the closing </i> tag
        s;_;</i>;
    }
    b top
}

The result is (reading input from stdin):

$ sed -f hold-buffer-exchange.sed 
This is a _test_ of the _script_ script.
This is a <i>test</i> of the <i>script</i> script.
This works even across line _breaks
This works even across line <i>breaks
as we can see_ here.
as we can see</i> here.

